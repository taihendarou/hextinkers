---
layout: page
title:  "Alterando o n√∫mero inicial de vidas do Mario"
order: 40
---

Esta mudan√ßa simples ser√° uma oportunidade de se familiarizar melhor com os endere√ßos da mem√≥ria RAM, dar os primeiros passos no uso do depurador e fazer uma pequena mudan√ßa j√° em Assembly, a famosa linguagem de m√°quina.

Como o pr√≥prio t√≠tulo diz, vamos alterar o n√∫mero de vidas inicial do Mario, que originalmente √© de tr√™s.

O n√∫mero de vidas do jogador √© um valor que se altera durante a jogatina. Voc√™ pode ganhar ou perder vidas. Ent√£o determinada vari√°vel pode aumentar ou diminuir. Provavelmente o programa faz uma verifica√ß√£o nessa vari√°vel antes de iniciar um jogo, para verificar se devemos avan√ßar para a pr√≥xima tela ou se √© hora do famigerado GAME OVER. Sendo assim, esse valor est√° na **mem√≥ria do processador**, tamb√©m conhecida como mem√≥ria RAM.

Nosso primeiro desafio √© encontrar o endere√ßo da mem√≥ria RAM que armazena esse valor. Para chegar l√°, precisamos partir do que temos em m√£os. Sabemos que o Mario come√ßa com 3 vidas e sabemos em quais circunst√¢ncias esse n√∫mero aumenta ou diminui. √â observando essas varia√ß√µes que vamos encontrar.

Vou utilizar o emulador Mesen. Abrindo o **Memory Viewer** (Visualizador de Mem√≥ria) e selecionando **CPU Memory** (Mem√≥ria da CPU) como tipo de mem√≥ria (sele√ß√£o em **Memory Type**), conseguimos visualizar a mem√≥ria RAM.

![Image](/img/tutorial_mario_vidas/mariovidas01.png){:class="centered"}

Poder√≠amos procurar manualmente a√≠, mas veja que temos sessenta e cinco mil quinhentos e trinta e seis bytes. Mesmo supondo que esse tipo de informa√ß√£o normalmente est√° armazenada no come√ßo, n√£o seria pr√°tico buscar manualmente.

Ent√£o, para isso, usaremos uma ferramenta chamada **Memory Search**. O princ√≠pio dessa ferramenta √© o mesmo de antigas ferramentas como o [Cheat-O-Matic](https://pt.wikipedia.org/wiki/Cheat_Engine), que us√°vamos para alterar atributos em jogos como [Elifoot 98](https://pt.wikipedia.org/wiki/Elifoot).

Consiste em filtrar os endere√ßos de mem√≥ria com determinado valor e depois, em cima desses endere√ßos filtrados, realizar uma nova filtragem com base nos que sofreram a varia√ß√£o que desejamos. O Mesen possui essa ferramenta integrada. Basta acessar **Debug** -> **Memory Search**.

Inicie o jogo na primeira fase, pause a emula√ß√£o e abra o **Memory Search**. Sabemos que o Mario come√ßa com tr√™s vidas, ent√£o, na aba **Compare To**, selecione **Specific value** e vamos buscar pelos endere√ßos de mem√≥ria com o valor 02.

Por que 02 e n√£o 03? Aqui vai um pouco de familiaridade com programa√ß√£o de baixo n√≠vel. Eu sei que √© mais comum, neste tipo de verifica√ß√£o, o programa verificar se um valor √© positivo ou negativo. Ent√£o, quando o valor est√° em 00, ainda temos uma vida.

- 00 - Uma vida 
- 01 - Duas vidas 
- 02 - Tr√™s vidas 

Ap√≥s fazer a busca, teremos filtrados todos os endere√ßos de mem√≥ria atualmente com o valor 02:

![Image](/img/tutorial_mario_vidas/mariovidas02.png){:class="centered"}

Agora, precisamos mudar a quantidade de vidas que temos. O jeito mais f√°cil de fazer isso √©... morrendo! üíÄ

![Image](/img/tutorial_mario_vidas/mariovidas03.png){:class="centered"}

Volte ao **Memory Search** e fa√ßa uma nova busca. Coloque "01" em **Specific Value** e clique novamente em **Apply Filter**. Agora, teremos todos os endere√ßos de mem√≥ria que anteriormente tinham o valor de 02 e agora possuem o valor de 01.

![Image](/img/tutorial_mario_vidas/mariovidas04.png){:class="centered"}

Como pode ver no print acima, sobrou apenas um, no endere√ßo **$075a**. Provavelmente, esse √© o endere√ßo de mem√≥ria que armazena a quantidade atual de vidas do Mario.

Vamos testar se √© isso mesmo. Abra o **Memory Viewer** (editor hexadecimal do emulador) e, com **CPU Memory** selecionado, v√° ao endere√ßo **$075a**.

Chegando l√°, vamos alterar o valor para qualquer coisa entre 00 a FF (lembrando que √© hexadecimal). Vou experimentar alterar para 08.

Feita a mudan√ßa, voltamos ao jogo e morremos de novo, para voltar at√© a tela que mostra a quantidade de vidas do Mario.

![Image](/img/tutorial_mario_vidas/mariovidas05.png){:class="centered"}

Bingo! √â isso mesmo. O valor presente no endere√ßo $075a representa a quantidade de vidas atuais do Mario.

Nosso pr√≥ximo passo √© fazer com que essa mudan√ßa seja permanente, no sentido de que, sempre que o jogo iniciar, j√° come√ßar com essas 8 vidas (ou qualquer outro n√∫mero que escolhermos).

Para isso, precisamos entender que o programa do jogo, em algum momento durante sua execu√ß√£o, escrever√° o valor 02 no endere√ßo de mem√≥ria $075a. Isso provavelmente ser√° feito durante o in√≠cio da execu√ß√£o do gameplay.

Para encontrar a instru√ß√£o que faz isso, usaremos um recurso chamado **Break Point** (ponto de interrup√ß√£o), que consiste em interromper a execu√ß√£o do programa (e mostrar onde a interrup√ß√£o ocorreu) quando determinada condi√ß√£o for correspondida.

A condi√ß√£o aqui, no caso, ser√°: "*Escrever o valor 02 no endere√ßo $075a*".

Para isso, v√° ao endere√ßo $075a pelo visualizador de mem√≥ria (**Memory Viewer**, onde est√°vamos), clique com o bot√£o direito do mouse e selecione **Edit Breakpoint**, conforme imagem abaixo:

![Image](/img/tutorial_mario_vidas/mariovidas06.png){:class="centered"}

Na janela que se abrir, marque que queremos que o breakpoint ocorra durante a escrita (**Write**) e preencha a condi√ß√£o conforme indicado. Estamos exatamente dizendo que queremos interromper a execu√ß√£o quando ocorrer uma escrita do valor 02 no endere√ßo $075a.

![Image](/img/tutorial_mario_vidas/mariovidas07.png){:class="centered"}

Clique em OK e reinicie o jogo (para dar oportunidade ao jogo de escrever 02 no endere√ßo de mem√≥ria e assim ocorrer a interrup√ß√£o).

Logo no in√≠cio, antes de aparecer qualquer coisa na tela, j√° teremos a interrup√ß√£o! O depurador do emulador abrir√° com a interrup√ß√£o ocorrendo na seguinte instru√ß√£o.

![Image](/img/tutorial_mario_vidas/mariovidas08.png){:class="centered"}

Aqui, meu amigo, temos o mais puro assembly do processador 6502. A instru√ß√£o **STA $075A** √© a que est√° escrevendo o valor $02 neste endere√ßo de mem√≥ria. Isto porque **STA** √© a instru√ß√£o que escreve o valor presente no registrador A em um endere√ßo de mem√≥ria espec√≠fico. E, atualmente, o valor presente nesse registrador √© $02.

Tamb√©m chamamos esse registrador A de **Acumulador**.

Na linha acima, temos a instru√ß√£o **LDA #$02**. Esta instru√ß√£o est√° carregando o valor literal $02 no acumulador. Ou seja, o que o programa faz √©:

	LDA #$02 ;; Carrega o valor $02 no Acumulador
	STA $025A ; Escreve o valor atual de A no endere√ßo $025A
	

Ent√£o, o que precisamos fazer √© alterar essa primeira linha. Mais especificamente, o valor ap√≥s **LDA**. Temos duas formas de fazer isso. Uma delas √© usando o pr√≥prio editor de assembly do emulador. Para isso, clique com o bot√£o direito sobre a linha que queremos editar e v√° em **Edit selected code**.

![Image](/img/tutorial_mario_vidas/mariovidas09.png){:class="centered"}

Abrir√° uma janela com um editor. Do lado esquerdo, poder√° editar o c√≥digo como bem entender. No nosso caso, vamos alterar o #$02 para #$08.

![Image](/img/tutorial_mario_vidas/mariovidas10.png){:class="centered"}

Clique em Apply e pronto, a ROM est√° alterada (ao menos enquanto estiver aberta). Para tornar a mudan√ßa definitiva, voc√™ deve, na pr√≥pria janela do depurador, ir em **File** -> **Save ROM as**. Desta forma, poder√° salvar um novo arquivo da ROM com a mudan√ßa aplicada.

Outra op√ß√£o interessante ali dispon√≠vel √© salvar as altera√ß√µes como um arquivo de[patch do tipo IPS](tutorial_patch_ips.html). Assim, voc√™ ter√° um patch apenas com as modifica√ß√µes que fez neste momento e poder√° facilitar o seu controle de vers√µes.

![Image](/img/tutorial_mario_vidas/mariovidas11.png){:class="centered"}

A outra op√ß√£o para fazer a mudan√ßa seria editar diretamente no editor hexadecimal. Para isso, passe o mouse sobre a linha da instru√ß√£o que queremos alterar. Ali, voc√™ ver√° o endere√ßo da instru√ß√£o tanto na mem√≥ria de CPU quanto na ROM (PRG). Anote o endere√ßo da PRG.

![Image](/img/tutorial_mario_vidas/mariovidas12.png){:class="centered"}

Neste caso, √© $1069. Vamos at√© este endere√ßo por um editor hexadecimal qualquer. Por√©m, o emulador Mesen desconsidera o cabe√ßalho da ROM. Ent√£o, em outros editores hexadecimais, precisaremos somar $10 para chegar ao endere√ßo correto. No caso, ent√£o, fica $1079.

![Image](/img/tutorial_mario_vidas/mariovidas13.png){:class="centered"}

Veja que isso nos levou ao valor A9, seguido de 02. O valor A9 √© o opcode para a instru√ß√£o **LDA**. Logo ap√≥s, temos o operando, que neste caso √© 02. Sendo assim, √© esse 02 que devemos alterar para modificar o n√∫mero de vidas inicial do Mario.

Edite o valor e salve uma nova ROM. Lembre-se sempre de manter backups e um bom controle de vers√µes. As chances de estragar tudo ao fazer este tipo de modifica√ß√£o s√£o grandes.

Pronto!

O mais importante, no fim das contas, s√£o os princ√≠pios que voc√™ aprendeu com este exerc√≠cio. O processo para encontrar outros valores de atributos do jogo na mem√≥ria ser√° semelhante, assim como o processo para modificar o valor inicial desse valor tamb√©m ser√° muito parecido.

Com este conhecimento, voc√™ pode come√ßar a criar vers√µes hackeadas de diversos jogos, diminuindo ou aumentando o n√≠vel de dificuldade!

![Image](/img/tutorial_mario_vidas/gif_mariojam.gif){:class="centered"}	
